module.exports = function(grunt) {    /*    WHAT NEEDS TO HAPPEN FOR A RELEASE    MANUAL: Merge branches into master    BASH: npm test - Test proposed release    *MANUAL: Lint proposed release    BASH: grunt - loads of stuff    Check in and commit main    Tag    Check in and commit bower    Tag    Publish npm    Create branch for the next release    */    // Project configuration.    grunt.initConfig({        builddir: 'js-build',        pkg: grunt.file.readJSON('package.json'),        meta: {            banner: '/**\n' + ' * <%= pkg.description %>\n' +                ' * @version v<%= pkg.version %> - ' +                '<%= grunt.template.today("yyyy-mm-dd") %>\n' +                ' * @link <%= pkg.homepage %>\n' +                ' * @license MIT License, http://www.opensource.org/licenses/MIT\n' + ' */'        },        concat: {            options: {                banner: '/*! <%= pkg.name %> <%= grunt.template.today("yyyy-mm-dd") %> */\n'            },            build: {                src: ['app/js/<%= pkg.name %>.js', 'app/js/controllers/*.js', 'app/js/directives/*.js', 'app/js/filters/*.js', 'app/js/services/*.js', 'app/js/lib/*.js'],                dest: '<%= builddir %>/<%= pkg.name %>.js'            }        },        uglify: {            options: {                banner: '/*! <%= pkg.name %> <%= grunt.template.today("yyyy-mm-dd") %> */\n'            },            build: {                src: '<%= builddir %>/<%= pkg.name %>.js',                dest: '<%= builddir %>/<%= pkg.name %>.min.js'            }        },        lint: {            files: ['grunt.js', 'common/**/*.js', 'modules/**/*.js']        },        copy: {            // Copy the required files into the npm distribution folder//                    {expand: true, src: ['path/*'], dest: 'dest/', filter: 'isFile'}, // includes files in path//                    {expand: true, src: ['path/**'], dest: 'dest/'}, // includes files in path and its subdirs//                    {expand: true, cwd: 'path/', src: ['**'], dest: 'dest/'}, // makes all src relative to cwd//                    {expand: true, flatten: true, src: ['path/**'], dest: 'dest/', filter: 'isFile'} // flattens results to a single level            minimal: {                files: [                    {src: 'bower.json', dest: 'minimal/bower.json'},                    {src: 'app/css/forms-angular.css', dest:'minimal/app/css/forms-angular.css'},                    {src: 'js-build/forms-angular.min.js', dest:'minimal/app/lib/forms-angular.min.js'},                    {src: 'app/partials/404.html', dest: 'minimal/app/partials/404.html'},                    {src: 'app/partials/base-edit.html', dest: 'minimal/app/partials/base-edit.html'},                    {src: 'app/partials/base-list.html', dest: 'minimal/app/partials/base-list.html'},                    {src: 'server/lib/data_form.js', dest: 'minimal/server/lib/data_form.js'}                ]            },            bower: {                files: [                    {src: 'bower.json', dest: 'js-build/bower.json'},                    {src: 'app/css/forms-angular.css', dest:'js-build/forms-angular.css'}                ]            },            npm: {                files: [                    {src: 'package.json', dest:'npm-build/LICENSE.txt'},                    {src: 'LICENSE.txt', dest:'npm-build/LICENSE.txt'},                    {src: 'server/lib/data_form.js',dest:'npm-build/lib/data_form.js'}                ]            }        },        bump: {            options: {                files: ['package.json','bower.json'],                updateConfigs: ['pkg'],                commit: true,                commitFiles: ['-a'], // '-a' for all files                createTag: true,                tagName: 'v%VERSION%',                tagMessage: 'Version %VERSION%',                push: true,                pushTo: 'origin',                gitDescribeOptions: '--tags --always --abbrev=1 --dirty=-d' // options to use with '$ git describe'            }        }    });    // Load the plugin that provides the "uglify" task.    grunt.loadNpmTasks('grunt-contrib-uglify');    grunt.loadNpmTasks('grunt-contrib-concat');    grunt.loadNpmTasks('grunt-bump');    grunt.loadNpmTasks('grunt-contrib-copy');    grunt.registerTask('modify_json', 'Modify the package.json and bower.json files.', function() {        var filename = 'minimal/bower.json';        var content = grunt.file.readJSON(filename);        content.name = "fng-minimal"        grunt.file.write(filename, content);        var filename = 'minimal/package.json';        var content = grunt.file.readJSON(filename);        content.name = "fng-minimal"        content.description = "A minimal deployment of forms-angular"        grunt.file.write(filename, content);        grunt.log.ok('Modified 2 files');    });    var bumpLevel = grunt.option('bumpLevel') || 'patch';    grunt.registerTask('default', ['bump-only:'+bumpLevel, 'concat', 'uglify', 'copy', 'modify_json']);};